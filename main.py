import os
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from video_generator import generate_children_video
from flask import Flask, request
import asyncio
import json

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
TOKEN = "8227990363:AAGGZbv_gMZyPdPM95f6FnbtxoY96wiqXpQ"
logging.basicConfig(level=logging.INFO)

# –û—Ç—Ä–∏–º—É—î–º–æ URL –∑ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è Render
RENDER_EXTERNAL_URL = os.environ.get('RENDER_EXTERNAL_URL', 'https://kids-rvcr.onrender.com')
WEBHOOK_URL = f"{RENDER_EXTERNAL_URL}/{TOKEN}"

# –°—Ç–≤–æ—Ä—é—î–º–æ Flask –¥–æ–¥–∞—Ç–æ–∫
app = Flask(__name__)

# –°—Ç–≤–æ—Ä—é—î–º–æ Telegram Application
application = Application.builder().token(TOKEN).build()

async def set_webhook_on_startup():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤–µ–±—Ö—É–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É"""
    try:
        await application.bot.set_webhook(url=WEBHOOK_URL)
        logging.info(f"‚úÖ Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {WEBHOOK_URL}")
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è webhook: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = (
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø —Å—Ç–≤–æ—Ä—é—é –¥–∏—Ç—è—á—ñ –≤—ñ–¥–µ–æ!\n\n"
        "üéØ –ù–∞–ø–∏—à–∏ —Ç–µ–º—É –¥–ª—è –≤—ñ–¥–µ–æ!\n"
        "–ü—Ä–∏–∫–ª–∞–¥: \"–∫–∞–∑–∫–∞ –ø—Ä–æ –¥–∏–Ω–æ–∑–∞–≤—Ä–∏–∫–∞\""
    )
    await update.message.reply_text(welcome_text)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    user_id = update.message.from_user.id
    
    await update.message.reply_text("üé¨ –°—Ç–≤–æ—Ä—é—é –∫–æ–Ω—Ç–µ–Ω—Ç...")
    
    try:
        result = await generate_children_video(user_message, user_id)
        
        if isinstance(result, dict) and "audio" in result:
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∞—É–¥—ñ–æ
            with open(result["audio"], 'rb') as audio_file:
                await update.message.reply_audio(
                    audio=audio_file,
                    caption=f"üéµ {result['text']}\n\n–¢–µ–º–∞: {user_message}"
                )
            os.remove(result["audio"])
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            if "images" in result:
                for img_path in result["images"]:
                    with open(img_path, 'rb') as img_file:
                        await update.message.reply_photo(photo=img_file)
                    os.remove(img_path)
        else:
            await update.message.reply_text(f"üìñ {result['text']}\n\n–¢–µ–º–∞: {user_message}")
            
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞: {e}")
        await update.message.reply_text("‚ùå –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É —Ç–µ–º—É")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = "üìñ –ù–∞–ø–∏—à–∏ —Ç–µ–º—É –¥–ª—è –≤—ñ–¥–µ–æ: \"–∫–∞–∑–∫–∞\", \"–≤—á–∏–º–æ –∫–æ–ª—å–æ—Ä–∏\", \"–ø—ñ—Å–µ–Ω—å–∫–∞\""
    await update.message.reply_text(help_text)

# –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("help", help_command))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

@app.route('/')
def home():
    return "ü§ñ –î–∏—Ç—è—á–∏–π Video Bot is running! üé¨"

@app.route('/set_webhook', methods=['GET'])
def set_webhook_route():
    """–í—Ä—É—á–Ω—É –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –≤–µ–±—Ö—É–∫"""
    try:
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ asyncio.run –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        asyncio.run(set_webhook_on_startup())
        return f"‚úÖ Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {WEBHOOK_URL}"
    except Exception as e:
        return f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}"

@app.route('/remove_webhook', methods=['GET'])
def remove_webhook_route():
    """–í–∏–¥–∞–ª–∏—Ç–∏ –≤–µ–±—Ö—É–∫"""
    try:
        asyncio.run(application.bot.delete_webhook())
        return "‚úÖ Webhook –≤–∏–¥–∞–ª–µ–Ω–æ"
    except Exception as e:
        return f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}"

@app.route('/status', methods=['GET'])
def status():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É"""
    return {
        "status": "running",
        "webhook_url": WEBHOOK_URL,
        "bot_token": TOKEN[:10] + "..."  # –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –ø–æ–≤–Ω–∏–π —Ç–æ–∫–µ–Ω
    }

@app.route(f'/{TOKEN}', methods=['POST'])
def webhook():
    """–û–±—Ä–æ–±–∫–∞ –≤–µ–±—Ö—É–∫–∞ –≤—ñ–¥ Telegram - –°–ò–ù–•–†–û–ù–ù–ê –≤–µ—Ä—Å—ñ—è"""
    try:
        if not request.data:
            return 'No data', 400
            
        # –û—Ç—Ä–∏–º—É—î–º–æ JSON –¥–∞–Ω—ñ
        data = request.get_json()
        if not data:
            return 'Invalid JSON', 400
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ Update –æ–±'—î–∫—Ç
        update = Update.de_json(data, application.bot)
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
        def process_update_sync():
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                loop.run_until_complete(application.process_update(update))
            finally:
                loop.close()
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ, —â–æ–± –Ω–µ –±–ª–æ–∫—É–≤–∞—Ç–∏
        import threading
        thread = threading.Thread(target=process_update_sync)
        thread.start()
        
        return 'OK'
        
    except Exception as e:
        logging.error(f"Webhook error: {e}")
        return 'Error', 500

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if os.environ.get('RENDER'):
        logging.info("üöÄ –ó–∞–ø—É—Å–∫ –Ω–∞ Render –∑ –≤–µ–±—Ö—É–∫–æ–º...")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤–µ–±—Ö—É–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É
        try:
            asyncio.run(set_webhook_on_startup())
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è webhook: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ Flask
        port = int(os.environ.get('PORT', 5000))
        app.run(host='0.0.0.0', port=port, debug=False, use_reloader=False)
    else:
        logging.info("üñ•Ô∏è –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ –∑ polling...")
        application.run_polling()

if __name__ == "__main__":
    main()
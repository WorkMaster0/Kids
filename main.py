import os
import logging
from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from video_generator import generate_children_video
from flask import Flask, request
import asyncio
import threading

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
TOKEN = "8227990363:AAGGZbv_gMZyPdPM95f6FnbtxoY96wiqXpQ"
logging.basicConfig(level=logging.INFO)

# –û—Ç—Ä–∏–º—É—î–º–æ URL –∑ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è Render
RENDER_EXTERNAL_URL = os.environ.get('RENDER_EXTERNAL_URL', 'https://kids-rvcr.onrender.com')
WEBHOOK_URL = f"{RENDER_EXTERNAL_URL}/{TOKEN}"

# –°—Ç–≤–æ—Ä—é—î–º–æ Flask –¥–æ–¥–∞—Ç–æ–∫
app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π bot instance
bot = Bot(TOKEN)

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = "üëã –ü—Ä–∏–≤—ñ—Ç! –ù–∞–ø–∏—à–∏ —Ç–µ–º—É –¥–ª—è –≤—ñ–¥–µ–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: '–∫–∞–∑–∫–∞ –ø—Ä–æ –¥–∏–Ω–æ–∑–∞–≤—Ä–∏–∫–∞')"
    await update.message.reply_text(welcome_text)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    user_id = update.message.from_user.id
    
    await update.message.reply_text("üé¨ –°—Ç–≤–æ—Ä—é—é –∫–æ–Ω—Ç–µ–Ω—Ç...")
    
    try:
        result = await generate_children_video(user_message, user_id)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        if isinstance(result, dict):
            if "audio" in result:
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∞—É–¥—ñ–æ
                with open(result["audio"], 'rb') as audio_file:
                    await update.message.reply_audio(
                        audio=audio_file,
                        caption=f"üéµ {result['text']}\n\n–¢–µ–º–∞: {user_message}"
                    )
                os.remove(result["audio"])
                
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                if "images" in result:
                    for img_path in result["images"]:
                        with open(img_path, 'rb') as img_file:
                            await update.message.reply_photo(photo=img_file)
                        os.remove(img_path)
            elif "text" in result:
                # –¢—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç
                await update.message.reply_text(f"üìñ {result['text']}\n\n–¢–µ–º–∞: {user_message}")
                
        elif isinstance(result, str) and os.path.exists(result):
            # –í—ñ–¥–µ–æ —Ñ–∞–π–ª
            with open(result, 'rb') as video_file:
                await update.message.reply_video(
                    video=video_file,
                    caption=f"üéâ –í–∞—à–µ –≤—ñ–¥–µ–æ –≥–æ—Ç–æ–≤–µ!\n–¢–µ–º–∞: {user_message}"
                )
            os.remove(result)
        else:
            await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É —Ç–µ–º—É.")
            
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞: {e}")
        await update.message.reply_text("‚ùå –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É —Ç–µ–º—É")

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤–µ–±—Ö—É–∫–∞
def set_webhook_sync():
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞"""
    try:
        import requests
        url = f"https://api.telegram.org/bot{TOKEN}/setWebhook"
        data = {"url": WEBHOOK_URL}
        response = requests.post(url, json=data)
        
        if response.status_code == 200:
            logging.info(f"‚úÖ Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {WEBHOOK_URL}")
            return True
        else:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {response.text}")
            return False
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è webhook: {e}")
        return False

def process_update_sync(update_data):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è"""
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π event loop –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π Application –¥–ª—è –æ–±—Ä–æ–±–∫–∏
        app = Application.builder().token(TOKEN).build()
        
        # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
        app.add_handler(CommandHandler("start", start))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Ç–∞ –æ–±—Ä–æ–±–ª—è—î–º–æ
        loop.run_until_complete(app.initialize())
        update = Update.de_json(update_data, app.bot)
        loop.run_until_complete(app.process_update(update))
        loop.run_until_complete(app.shutdown())
        
        loop.close()
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏: {e}")

@app.route('/')
def home():
    return "ü§ñ –î–∏—Ç—è—á–∏–π Video Bot is running! üé¨"

@app.route('/set_webhook', methods=['GET'])
def set_webhook_route():
    """–í—Ä—É—á–Ω—É –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –≤–µ–±—Ö—É–∫"""
    if set_webhook_sync():
        return f"‚úÖ Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {WEBHOOK_URL}"
    else:
        return "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ webhook"

@app.route('/remove_webhook', methods=['GET'])
def remove_webhook_route():
    """–í–∏–¥–∞–ª–∏—Ç–∏ –≤–µ–±—Ö—É–∫"""
    try:
        import requests
        url = f"https://api.telegram.org/bot{TOKEN}/deleteWebhook"
        response = requests.post(url)
        return "‚úÖ Webhook –≤–∏–¥–∞–ª–µ–Ω–æ"
    except Exception as e:
        return f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}"

@app.route('/status', methods=['GET'])
def status():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É"""
    try:
        import requests
        url = f"https://api.telegram.org/bot{TOKEN}/getWebhookInfo"
        response = requests.get(url).json()
        return {
            "status": "running",
            "webhook_info": response
        }
    except:
        return {"status": "running", "webhook_url": WEBHOOK_URL}

@app.route(f'/{TOKEN}', methods=['POST'])
def webhook():
    """–û–±—Ä–æ–±–∫–∞ –≤–µ–±—Ö—É–∫–∞ –≤—ñ–¥ Telegram"""
    try:
        data = request.get_json()
        if not data:
            return 'Invalid JSON', 400
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
        thread = threading.Thread(target=process_update_sync, args=(data,))
        thread.start()
        
        return 'OK'
        
    except Exception as e:
        logging.error(f"Webhook error: {e}")
        return 'Error', 500

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if os.environ.get('RENDER'):
        logging.info("üöÄ –ó–∞–ø—É—Å–∫ –Ω–∞ Render –∑ –≤–µ–±—Ö—É–∫–æ–º...")
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤–µ–±—Ö—É–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
        set_webhook_sync()
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ Flask
        port = int(os.environ.get('PORT', 5000))
        app.run(host='0.0.0.0', port=port, debug=False, use_reloader=False)
        
    else:
        logging.info("üñ•Ô∏è –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ –∑ polling...")
        # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É
        application = Application.builder().token(TOKEN).build()
        application.add_handler(CommandHandler("start", start))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        application.run_polling()

if __name__ == "__main__":
    main()
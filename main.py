import os
import logging
from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from video_generator import generate_cartoon
from flask import Flask, request
import asyncio
import threading
import tempfile
import requests
import sys
from datetime import datetime

# –î–æ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–æ —à–ª—è—Ö—É –ø–æ—à—É–∫—É –º–æ–¥—É–ª—ñ–≤
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN', "8227990363:AAGGZbv_gMZyPdPM95f6FnbtxoY96wiqXpQ")
logging.basicConfig(
    level=logging.INFO, 
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot.log')
    ]
)

# –û—Ç—Ä–∏–º—É—î–º–æ URL –∑ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è Render
RENDER_EXTERNAL_URL = os.environ.get('RENDER_EXTERNAL_URL', 'https://kids-rvcr.onrender.com')
WEBHOOK_URL = f"{RENDER_EXTERNAL_URL}/{TOKEN}"

# –°—Ç–≤–æ—Ä—é—î–º–æ Flask –¥–æ–¥–∞—Ç–æ–∫
app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π bot instance
bot = Bot(TOKEN)

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = (
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø —Å—Ç–≤–æ—Ä—é—é –¥–∏—Ç—è—á—ñ —ñ—Å—Ç–æ—Ä—ñ—ó!\n\n"
        "–ù–∞–ø–∏—à–∏ —Ç–µ–º—É, —ñ —è:\n"
        "üìñ –ü—Ä–∏–¥—É–º–∞—é —Ü—ñ–∫–∞–≤—É —ñ—Å—Ç–æ—Ä—ñ—é\n"
        "üéµ –û–∑–≤—É—á—É —ó—ó —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é\n"
        "üé® –°—Ç–≤–æ—Ä—é —è—Å–∫—Ä–∞–≤–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è\n"
        "üé¨ –ó–≥–µ–Ω–µ—Ä—É—é –≤—ñ–¥–µ–æ\n\n"
        "–ü—Ä–∏–∫–ª–∞–¥–∏ —Ç–µ–º:\n"
        "‚Ä¢ –¥–∏–Ω–æ–∑–∞–≤—Ä–∏–∫\n"
        "‚Ä¢ –∫–æ—Å–º–æ—Å\n"
        "‚Ä¢ –ø—Ä–∏–Ω—Ü–µ—Å–∞\n"
        "‚Ä¢ –ª—ñ—Å–æ–≤—ñ –∑–≤—ñ—Ä—è—Ç–∞\n"
        "‚Ä¢ –º–∞—à–∏–Ω–∫–∏\n"
        "‚Ä¢ –∫–∞–∑–∫–∞\n\n"
        "–ù–∞–ø–∏—à–∏ –±—É–¥—å-—è–∫—É —Ç–µ–º—É!"
    )
    await update.message.reply_text(welcome_text)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞:\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –±—É–¥—å-—è–∫–∏–π —Ç–µ–∫—Å—Ç, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥:\n"
        "- –í–µ—Å–µ–ª–∞ –ø—Ä–∏–≥–æ–¥–∞\n"
        "- –î–∏—Ç—è—á–∞ –∫–∞–∑–∫–∞\n"
        "- –ü—Ä–∏–≥–æ–¥–∏ —É –ª—ñ—Å—ñ\n"
        "- –ö–æ—Å–º—ñ—á–Ω–∞ –ø–æ–¥–æ—Ä–æ–∂\n\n"
        "–Ø —Å—Ç–≤–æ—Ä—é:\n"
        "üéµ –ê—É–¥—ñ–æ –≤–µ—Ä—Å—ñ—é —Ç–≤–æ–≥–æ —Ç–µ–∫—Å—Ç—É\n"
        "üé® –Ø—Å–∫—Ä–∞–≤–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è\n"
        "üé¨ –í—ñ–¥–µ–æ—Ñ–∞–π–ª –∑ –∞—É–¥—ñ–æ\n\n"
        "–ü–æ—á–Ω–∏ –∑ –∫–æ–º–∞–Ω–¥–∏ /start"
    )
    await update.message.reply_text(help_text)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    user_id = update.message.from_user.id
    
    if len(user_message) < 2:
        await update.message.reply_text("üìù –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à–∏ —Ç–µ–º—É (–º—ñ–Ω—ñ–º—É–º 2 —Å–∏–º–≤–æ–ª–∏)")
        return
    
    if len(user_message) > 30:
        await update.message.reply_text("üìù –¢–µ–º–∞ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∞. –ú–∞–∫—Å–∏–º—É–º 30 —Å–∏–º–≤–æ–ª—ñ–≤.")
        return
    
    await update.message.reply_text("üé¨ –°—Ç–≤–æ—Ä—é—é –º—É–ª—å—Ç—Ñ—ñ–ª—å–º... –¶–µ –∑–∞–π–º–µ –±–ª–∏–∑—å–∫–æ —Ö–≤–∏–ª–∏–Ω–∏ ‚è≥")
    
    try:
        result = await generate_cartoon(user_message, user_id)
        
        if isinstance(result, str) and os.path.exists(result):
            # –ú—É–ª—å—Ç—Ñ—ñ–ª—å–º —Å—Ç–≤–æ—Ä–µ–Ω–æ
            try:
                file_size = os.path.getsize(result) / (1024 * 1024)
                if file_size > 45:
                    await update.message.reply_text("‚ùå –ú—É–ª—å—Ç—Ñ—ñ–ª—å–º –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π")
                    os.remove(result)
                    return
                
                await update.message.reply_text("üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—é –º—É–ª—å—Ç—Ñ—ñ–ª—å–º...")
                
                with open(result, 'rb') as video_file:
                    await update.message.reply_video(
                        video=video_file,
                        caption=f"üéâ –ú—É–ª—å—Ç—Ñ—ñ–ª—å–º –Ω–∞ —Ç–µ–º—É: {user_message}",
                        supports_streaming=True,
                        width=1024,
                        height=768
                    )
                
                if os.path.exists(result):
                    os.remove(result)
                    
            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤—ñ–¥–µ–æ: {e}")
                await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –º—É–ª—å—Ç—Ñ—ñ–ª—å–º")
                
        elif isinstance(result, dict) and "text" in result:
            # –¢—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç —ñ—Å—Ç–æ—Ä—ñ—ó
            await update.message.reply_text(f"üìñ –û—Å—å —ñ–¥–µ—è –¥–ª—è –º—É–ª—å—Ç—Ñ—ñ–ª—å–º—É:\n\n{result['text']}")
            
        else:
            await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –º—É–ª—å—Ç—Ñ—ñ–ª—å–º")
            
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        await update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π —ñ–Ω—à—É —Ç–µ–º—É!")

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤–µ–±—Ö—É–∫–∞
def set_webhook_sync():
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞"""
    try:
        url = f"https://api.telegram.org/bot{TOKEN}/setWebhook"
        data = {"url": WEBHOOK_URL}
        response = requests.post(url, json=data)
        
        if response.status_code == 200:
            logging.info(f"‚úÖ Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {WEBHOOK_URL}")
            return True
        else:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {response.text}")
            return False
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è webhook: {e}")
        return False

def process_update_sync(update_data):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è"""
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        app = Application.builder().token(TOKEN).build()
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("help", help_command))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        loop.run_until_complete(app.initialize())
        update = Update.de_json(update_data, app.bot)
        loop.run_until_complete(app.process_update(update))
        loop.run_until_complete(app.shutdown())
        
        loop.close()
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏: {e}")

@app.route('/')
def home():
    return "ü§ñ Video Generator Bot is running! üé¨"

@app.route('/set_webhook', methods=['GET'])
def set_webhook_route():
    if set_webhook_sync():
        return f"‚úÖ Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {WEBHOOK_URL}"
    else:
        return "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ webhook"

@app.route('/remove_webhook', methods=['GET'])
def remove_webhook_route():
    try:
        url = f"https://api.telegram.org/bot{TOKEN}/deleteWebhook"
        response = requests.post(url)
        return "‚úÖ Webhook –≤–∏–¥–∞–ª–µ–Ω–æ"
    except Exception as e:
        return f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}"

@app.route('/status', methods=['GET'])
def status():
    try:
        url = f"https://api.telegram.org/bot{TOKEN}/getWebhookInfo"
        response = requests.get(url).json()
        return {
            "status": "running",
            "webhook_info": response,
            "webhook_url": WEBHOOK_URL
        }
    except Exception as e:
        return {"status": "running", "error": str(e), "webhook_url": WEBHOOK_URL}

@app.route(f'/{TOKEN}', methods=['POST'])
def webhook():
    try:
        data = request.get_json()
        if not data:
            return 'Invalid JSON', 400
        
        thread = threading.Thread(target=process_update_sync, args=(data,))
        thread.start()
        
        return 'OK'
    except Exception as e:
        logging.error(f"Webhook error: {e}")
        return 'Error', 500

@app.route('/health', methods=['GET'])
def health_check():
    return {
        "status": "healthy", 
        "service": "video-generator-bot",
        "timestamp": datetime.now().isoformat()
    }

def run_flask():
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=False, use_reloader=False)

def run_polling():
    logging.info("üñ•Ô∏è –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ –∑ polling...")
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.run_polling()

def main():
    if os.environ.get('RENDER'):
        logging.info("üöÄ –ó–∞–ø—É—Å–∫ –Ω–∞ Render –∑ –≤–µ–±—Ö—É–∫–æ–º...")
        set_webhook_sync()
        run_flask()
    else:
        run_polling()

if __name__ == "__main__":
    main()
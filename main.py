import os
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from video_generator import generate_children_video

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
TOKEN = "8227990363:AAGGZbv_gMZyPdPM95f6FnbtxoY96wiqXpQ"
logging.basicConfig(level=logging.INFO)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    welcome_text = (
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø —Å—Ç–≤–æ—Ä—é—é –¥–∏—Ç—è—á—ñ –≤—ñ–¥–µ–æ!\n\n"
        "üé¨ –î–æ—Å—Ç—É–ø–Ω—ñ —Ç–µ–º–∏:\n"
        "‚Ä¢ –ö–∞–∑–∫–∏ —Ç–∞ —ñ—Å—Ç–æ—Ä—ñ—ó\n"
        "‚Ä¢ –ù–∞–≤—á–∞–ª—å–Ω—ñ –≤—ñ–¥–µ–æ\n"
        "‚Ä¢ –ü—ñ—Å–µ–Ω—å–∫–∏ —Ç–∞ –≤—ñ—Ä—à–∏–∫–∏\n"
        "‚Ä¢ –†–æ–∑–≤–∏–≤–∞—é—á—ñ –∑–∞–Ω—è—Ç—Ç—è\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Ç–µ–º—É –¥–ª—è –≤—ñ–¥–µ–æ!"
    )
    await update.message.reply_text(welcome_text)

async def generate_children_video(topic: str, user_id: str):
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–æ–≤–Ω–æ—Ü—ñ–Ω–Ω–æ–≥–æ –¥–∏—Ç—è—á–æ–≥–æ –≤—ñ–¥–µ–æ"""
    try:
        # –ì–µ–Ω–µ—Ä—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é
        story_text = generate_story(topic)
        scenes = generate_story_scenes(story_text)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—É –ø–∞–ø–∫—É
        temp_dir = tempfile.mkdtemp()
        audio_path = os.path.join(temp_dir, "story_audio.mp3")
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ –∞—É–¥—ñ–æ —ñ—Å—Ç–æ—Ä—ñ—ó
        generate_audio(story_text, audio_path)
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –∫–æ–∂–Ω–æ—ó —Å—Ü–µ–Ω–∏
        image_paths = []
        for i, scene in enumerate(scenes):
            img_path = os.path.join(temp_dir, f"scene_{i}.png")
            if generate_story_image(scene['image_prompt'], img_path):
                image_paths.append(img_path)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –≤—ñ–¥–µ–æ (—è–∫—â–æ —î FFmpeg)
        if len(image_paths) > 0:
            try:
                from moviepy.editor import ImageClip, AudioFileClip, concatenate_videoclips
                
                clips = []
                audio_clip = AudioFileClip(audio_path)
                total_duration = audio_clip.duration
                scene_duration = total_duration / len(image_paths)
                
                for img_path in image_paths:
                    clip = ImageClip(img_path).set_duration(scene_duration)
                    clips.append(clip)
                
                final_clip = concatenate_videoclips(clips).set_audio(audio_clip)
                video_path = os.path.join(temp_dir, "final_video.mp4")
                final_clip.write_videofile(video_path, fps=24)
                
                return video_path
                
            except ImportError:
                # –Ø–∫—â–æ moviepy –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∞—É–¥—ñ–æ + –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                return {
                    "audio": audio_path,
                    "images": image_paths,
                    "text": story_text
                }
        
        return {"text": story_text}
        
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–µ–æ: {e}")
        return {"text": generate_story(topic)}

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ —Ç–µ–º–æ—é"""
    user_message = update.message.text
    user_id = update.message.from_user.id
    
    await update.message.reply_text("üé¨ –°—Ç–≤–æ—Ä—é—é –≤—ñ–¥–µ–æ... –¶–µ –∑–∞–π–º–µ 1-2 —Ö–≤–∏–ª–∏–Ω–∏!")
    
    try:
        # –ì–µ–Ω–µ—Ä—É—î–º–æ –≤—ñ–¥–µ–æ
        video_path = await generate_children_video(user_message, user_id)
        
        if video_path and os.path.exists(video_path):
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ–¥–µ–æ
            with open(video_path, 'rb') as video_file:
                await update.message.reply_video(
                    video=video_file,
                    caption=f"üéâ –í–∞—à–µ –≤—ñ–¥–µ–æ –≥–æ—Ç–æ–≤–µ!\n–¢–µ–º–∞: {user_message}"
                )
            # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
            os.remove(video_path)
        else:
            await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –≤—ñ–¥–µ–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É —Ç–µ–º—É.")
            
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞: {e}")
        await update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    help_text = (
        "üìñ –î–æ–≤—ñ–¥–∫–∞ –ø–æ –±–æ—Ç—É:\n\n"
        "üéØ –Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è:\n"
        "1. –ù–∞–ø–∏—à—ñ—Ç—å —Ç–µ–º—É –¥–ª—è –≤—ñ–¥–µ–æ\n"
        "2. –ß–µ–∫–∞–π—Ç–µ 1-2 —Ö–≤–∏–ª–∏–Ω–∏\n"
        "3. –û—Ç—Ä–∏–º—É–π—Ç–µ –≥–æ—Ç–æ–≤–µ –≤—ñ–¥–µ–æ!\n\n"
        "üìö –ü—Ä–∏–∫–ª–∞–¥–∏ —Ç–µ–º:\n"
        "‚Ä¢ \"–ö–∞–∑–∫–∞ –ø—Ä–æ —Ç—Ä—å–æ—Ö –ø–æ—Ä–æ—Å—è—Ç\"\n"
        "‚Ä¢ \"–í—á–∏–º–æ –∫–æ–ª—å–æ—Ä–∏\"\n"
        "‚Ä¢ \"–í–µ—Å–µ–ª–∞ –ø—ñ—Å–µ–Ω—å–∫–∞ –ø—Ä–æ –∑–≤—ñ—Ä—è—Ç–æ–∫\"\n"
        "‚Ä¢ \"–†–æ–∑–≤–∏–≤–∞—é—á–µ –≤—ñ–¥–µ–æ –ø—Ä–æ —Ü–∏—Ñ—Ä–∏\"\n\n"
        "üé® –ë–æ—Ç —Å—Ç–≤–æ—Ä—é—î:\n"
        "‚Ä¢ –Ø—Å–∫—Ä–∞–≤—ñ –∞–Ω—ñ–º–∞—Ü—ñ—ó\n"
        "‚Ä¢ –î–∏—Ç—è—á—ñ –≥–æ–ª–æ—Å–∏\n"
        "‚Ä¢ –í–µ—Å–µ–ª—É –º—É–∑–∏–∫—É\n"
        "‚Ä¢ –ù–∞–≤—á–∞–ª—å–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç"
    )
    await update.message.reply_text(help_text)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(TOKEN).build()
    
    # –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π!")
    application.run_polling()

if __name__ == "__main__":
    main()
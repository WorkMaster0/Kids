import os
import requests
from moviepy.editor import ImageClip, AudioFileClip, CompositeVideoClip, TextClip
from moviepy.config import change_settings
from gtts import gTTS
from PIL import Image, ImageDraw, ImageFont
import numpy as np
import random

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è FFmpeg
change_settings({"FFMPEG_BINARY": "/usr/bin/ffmpeg"})

def generate_story(topic: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ü—ñ–∫–∞–≤–∏—Ö –¥–∏—Ç—è—á–∏—Ö —ñ—Å—Ç–æ—Ä—ñ–π"""
    
    # –ë–∞–∑–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ–≤
    characters = {
        "—Ç–≤–∞—Ä–∏–Ω–∏": ["üêª –í–µ–¥–º–µ–∂–∏–∫ –¢–æ–ø—Ç–∏–∂–∫–∞", "üê∞ –ö—Ä–æ–ª–∏–∫ –°—Ç—Ä–∏–±—É–Ω—á–∏–∫", "ü¶ä –õ–∏—Å–∏—á–∫–∞ –°–µ—Å—Ç—Ä–∏—á–∫–∞", 
                   "üê≠ –ú–∏—à–∫–∞ –¶–≤—ñ—Ä–∫—É–Ω", "üê∏ –ñ–∞–±–∞ –ö–≤–∞–∫—É—à–∫–∞", "ü¶â –°–æ–≤–∞ –†–æ–∑—É–º–Ω–∏—Ü–∞"],
        "–ø–µ—Ä—Å–æ–Ω–∞–∂—ñ": ["üë¶ –•–ª–æ–ø—á–∏–∫ –ê–Ω–¥—Ä—ñ–π–∫–æ", "üëß –î—ñ–≤—á–∏–Ω–∫–∞ –°–æ—Ñ—ñ–π–∫–∞", "üßô –ß–∞—Ä—ñ–≤–Ω–∏–∫ –ó—ñ—Ä–æ—á–∫–∞",
                     "üë∏ –ü—Ä–∏–Ω—Ü–µ—Å–∞ –ú—Ä—ñ—è", "ü¶∏ –°—É–ø–µ—Ä–≥–µ—Ä–æ–π –°–≤—ñ—Ç–ª–∏–∫"],
        "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏—á–Ω—ñ": ["üëΩ –Ü–Ω–æ–ø–ª–∞–Ω–µ—Ç—è–Ω–∏–Ω –ì–ª—ñ–∫", "ü§ñ –†–æ–±–æ—Ç –ë—ñ–ø-–ë–æ–ø", "ü¶Ñ –Ñ–¥–∏–Ω–æ—Ä—ñ–≥ –ú—ñ—Å—è—á–∏–∫",
                       "üêâ –î—Ä–∞–∫–æ–Ω—á–∏–∫ –Ü—Å–∫—Ä–∏–Ω–∫–∞", "üßö –§–µ—è –ö–≤—ñ—Ç–æ—á–∫–∞"]
    }
    
    # –ë–∞–∑–∞ –ª–æ–∫–∞—Ü—ñ–π
    locations = ["—É —á–∞—Ä—ñ–≤–Ω–æ–º—É –ª—ñ—Å—ñ üå≥", "–Ω–∞ —Ö–º–∞—Ä–Ω—ñ–π –ø–ª–∞–Ω–µ—Ç—ñ ‚òÅÔ∏è", "—É –ø—ñ–¥–≤–æ–¥–Ω–æ–º—É —Ü–∞—Ä—Å—Ç–≤—ñ üê†", 
                "–≤ –∑–∞–º–∫—É –∑ —Ü—É–∫–µ—Ä–æ–∫ üç≠", "—É –∫—Ä–∞—ó–Ω—ñ –º—Ä—ñ–π üåà", "–Ω–∞ –¥–∏—Ç—è—á–æ–º—É –º–∞–π–¥–∞–Ω—á–∏–∫—É üé™"]
    
    # –ë–∞–∑–∞ –ø—Ä–∏–≥–æ–¥
    adventures = {
        "–∑–Ω–∞—Ö—ñ–¥–∫–∞": ["–∑–Ω–∞–π—à–ª–∏ —á–∞—Ä—ñ–≤–Ω–∏–π –∫–ª—é—á–∏–∫ üóùÔ∏è", "–≤—ñ–¥–∫—Ä–∏–ª–∏ —Ç–∞—î–º–Ω—É –∫–∞—Ä—Ç—É üó∫Ô∏è", 
                    "–∑–Ω–∞–π—à–ª–∏ –¥–∏–≤–Ω—É —ñ–≥—Ä–∞—à–∫—É üß∏", "–≤–∏—è–≤–∏–ª–∏ –ø–æ—Ä—Ç–∞–ª —É —ñ–Ω—à–∏–π —Å–≤—ñ—Ç üåÄ"],
        "—Ä—è—Ç—É–≤–∞–Ω–Ω—è": ["—Ä—è—Ç—É–≤–∞–ª–∏ –º–∞–ª–µ–Ω—å–∫–æ–≥–æ –ø—Ç–∞—à–∫–∞ üê¶", "–¥–æ–ø–æ–º–∞–≥–∞–ª–∏ –≤—Ç—Ä–∞—á–µ–Ω–æ–º—É —Ü—É—Ü–µ–Ω—è—Ç–∫—É üê∂",
                     "–ª—ñ–∫—É–≤–∞–ª–∏ —Ö–≤–æ—Ä–æ–≥–æ –¥–µ—Ä–µ–≤—Ü–µ üå±", "—Ä—è—Ç—É–≤–∞–ª–∏ —Ä—ñ—á–∫—É –≤—ñ–¥ –∑–∞–±—Ä—É–¥–Ω–µ–Ω–Ω—è üíß"],
        "–¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è": ["–¥–æ—Å–ª—ñ–¥–∂—É–≤–∞–ª–∏ –ø–µ—á–µ—Ä—É –∑ –∫—Ä–∏—Å—Ç–∞–ª–∞–º–∏ üíé", "–≤–∏–≤—á–∞–ª–∏ –∑—ñ—Ä–∫–∏ —Ç–µ–ª–µ—Å–∫–æ–ø–æ–º üî≠",
                       "—à—É–∫–∞–ª–∏ –¥—Ä–µ–≤–Ω—ñ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∏ üè∫", "–¥–æ—Å–ª—ñ–¥–∂—É–≤–∞–ª–∏ –ø—ñ–¥–≤–æ–¥–Ω–∏–π —Å–≤—ñ—Ç üêô"],
        "—Å–≤—è—Ç–∫—É–≤–∞–Ω–Ω—è": ["–≥–æ—Ç—É–≤–∞–ª–∏—Å—è –¥–æ –¥–Ω—è –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è üéÇ", "–æ—Ä–≥–∞–Ω—ñ–∑–æ–≤—É–≤–∞–ª–∏ –ª—ñ—Å–æ–≤–∏–π –±–∞–ª üé™",
                       "–≥–æ—Ç—É–≤–∞–ª–∏ —Å—é—Ä–ø—Ä–∏–∑ –¥–ª—è –¥—Ä—É–∑—ñ–≤ üéÅ", "–≤–ª–∞—à—Ç–æ–≤—É–≤–∞–ª–∏ –∫–æ–Ω–∫—É—Ä—Å —Ç–∞–ª–∞–Ω—Ç—ñ–≤ üé§"]
    }
    
    # –û–±–∏—Ä–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
    character_type = random.choice(list(characters.keys()))
    character = random.choice(characters[character_type])
    location = random.choice(locations)
    adventure_type = random.choice(list(adventures.keys()))
    adventure = random.choice(adventures[adventure_type])
    
    # –¢–µ–º–∏ –¥–ª—è –æ—Å–æ–±–ª–∏–≤–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
    special_topics = {
        "–¥–∏–Ω–æ–∑–∞–≤—Ä": "ü¶ñ –ü—Ä–∏–≥–æ–¥–∏ –¥–∏–Ω–æ–∑–∞–≤—Ä–∏–∫–∞ –î—É—Å—ñ —É —é—Ä—Å—å–∫–æ–º—É –ø–µ—Ä—ñ–æ–¥—ñ!",
        "–∫–æ—Å–º–æ—Å": "üöÄ –ü–æ–¥–æ—Ä–æ–∂ –¥–æ –∑—ñ—Ä–æ–∫ –Ω–∞ —Ä–∞–∫–µ—Ç—ñ-—Ü—É—Ü–µ–Ω—è—Ç–∫—É!",
        "–º–æ—Ä—è": "üê≥ –ü—ñ–¥–≤–æ–¥–Ω–∞ –ø—Ä–∏–≥–æ–¥–∞ –∑ –º–æ—Ä—Å—å–∫–æ—é –∑—ñ—Ä–æ—á–∫–æ—é!",
        "–ª—ñ—Å": "üå≥ –Ü—Å—Ç–æ—Ä—ñ—è –ø—Ä–æ –¥—Ä—É–∂–±—É –ª—ñ—Å–æ–≤–∏—Ö –∑–≤—ñ—Ä—è—Ç!",
        "–∫–∞–∑–∫–∞": "üìñ –ß–∞—Ä—ñ–≤–Ω–∞ –∫–∞–∑–∫–∞ –∑ –¥–æ–±—Ä–∏–º –∫—ñ–Ω—Ü–µ–º!",
        "–ø—ñ—Å–Ω—è": "üéµ –í–µ—Å–µ–ª–∞ –ø—ñ—Å–µ–Ω—å–∫–∞-–ø—Ä–∏–≥–æ–¥–∞!"
    }
    
    # –ì–µ–Ω–µ—Ä—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é
    if topic.lower() in special_topics:
        story = special_topics[topic.lower()]
    else:
        story = (
            f"{character} {location} {adventure}. "
            f"–†–∞–∑–æ–º –∑ –¥—Ä—É–∑—è–º–∏ –≤–æ–Ω–∏ –≤—á–∏–ª–∏—Å—è –¥—Ä—É–∂–±—ñ —Ç–∞ –¥–æ–±—Ä–æ—Ç—ñ! "
            f"–Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—è —â–∞—Å–ª–∏–≤–æ –∑ –º–æ—Ä–∞–ª–ª—é: –∑–∞–≤–∂–¥–∏ –¥–æ–ø–æ–º–∞–≥–∞–π —ñ–Ω—à–∏–º! üåü"
        )
    
    return story

def generate_story_scenes(story_text: str):
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å—Ü–µ–Ω –¥–ª—è —ñ—Å—Ç–æ—Ä—ñ—ó"""
    scenes = []
    
    # –†–æ–∑–±–∏–≤–∞—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –Ω–∞ —Å—Ü–µ–Ω–∏
    parts = story_text.split('. ')
    for i, part in enumerate(parts[:3]):  # –ú–∞–∫—Å–∏–º—É–º 3 —Å—Ü–µ–Ω–∏
        if part.strip():
            scenes.append({
                "text": part + '.',
                "image_prompt": f"–î–∏—Ç—è—á–µ –º—É–ª—å—Ç—è—à–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {part}",
                "duration": 10  # —Å–µ–∫—É–Ω–¥ –Ω–∞ —Å—Ü–µ–Ω—É
            })
    
    return scenes

def generate_image(scene_description: str, filename: str):
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (—Å–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è)"""
    # –¢—É—Ç –±—É–¥–µ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ Stable Diffusion/DALL-E
    # –ó–∞—Ä–∞–∑ —Å—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ—Å—Ç–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    width, height = 1024, 768
    img = Image.new('RGB', (width, height), color='lightblue')
    draw = ImageDraw.Draw(img)
    
    # –ü—Ä–æ—Å—Ç–∞ –≥—Ä–∞—Ñ—ñ–∫–∞
    draw.rectangle([100, 100, 300, 300], fill='yellow', outline='orange')
    draw.ellipse([600, 200, 800, 400], fill='green')
    
    img.save(filename)
    return filename

def generate_audio(text: str, filename: str):
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∞—É–¥—ñ–æ (—Ç–µ–∫—Å—Ç —É –º–æ–≤—É)"""
    tts = gTTS(text=text, lang='uk', slow=False)
    tts.save(filename)
    return filename

async def generate_children_video(topic: str, user_id: str):
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–æ–≤–Ω–æ—Ü—ñ–Ω–Ω–æ–≥–æ –¥–∏—Ç—è—á–æ–≥–æ –≤—ñ–¥–µ–æ"""
    try:
        # –ì–µ–Ω–µ—Ä—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é
        story_text = generate_story(topic)
        scenes = generate_story_scenes(story_text)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—É –ø–∞–ø–∫—É
        temp_dir = tempfile.mkdtemp()
        audio_path = os.path.join(temp_dir, "story_audio.mp3")
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ –∞—É–¥—ñ–æ —ñ—Å—Ç–æ—Ä—ñ—ó
        generate_audio(story_text, audio_path)
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –∫–æ–∂–Ω–æ—ó —Å—Ü–µ–Ω–∏
        image_paths = []
        for i, scene in enumerate(scenes):
            img_path = os.path.join(temp_dir, f"scene_{i}.png")
            if generate_story_image(scene['image_prompt'], img_path):
                image_paths.append(img_path)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –≤—ñ–¥–µ–æ (—è–∫—â–æ —î FFmpeg)
        if len(image_paths) > 0:
            try:
                from moviepy.editor import ImageClip, AudioFileClip, concatenate_videoclips
                
                clips = []
                audio_clip = AudioFileClip(audio_path)
                total_duration = audio_clip.duration
                scene_duration = total_duration / len(image_paths)
                
                for img_path in image_paths:
                    clip = ImageClip(img_path).set_duration(scene_duration)
                    clips.append(clip)
                
                final_clip = concatenate_videoclips(clips).set_audio(audio_clip)
                video_path = os.path.join(temp_dir, "final_video.mp4")
                final_clip.write_videofile(video_path, fps=24)
                
                return video_path
                
            except ImportError:
                # –Ø–∫—â–æ moviepy –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∞—É–¥—ñ–æ + –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                return {
                    "audio": audio_path,
                    "images": image_paths,
                    "text": story_text
                }
        
        # –Ø–∫—â–æ –Ω–µ–º–∞—î –∑–æ–±—Ä–∞–∂–µ–Ω—å, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç
        return {"text": story_text}
        
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–µ–æ: {e}")
        # –í–ò–ü–†–ê–í–õ–ï–ù–û: –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å–ª–æ–≤–Ω–∏–∫, –∞ –Ω–µ —Ä—è–¥–æ–∫
        return {"text": generate_story(topic)}